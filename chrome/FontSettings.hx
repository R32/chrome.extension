package chrome;

typedef FontName = {
	var fontId : String;
	var displayName : String;
}

@:fakeEnum(String) enum ScriptCode {
	Afak;
	Arab;
	Armi;
	Armn;
	Avst;
	Bali;
	Bamu;
	Bass;
	Batk;
	Beng;
	Blis;
	Bopo;
	Brah;
	Brai;
	Bugi;
	Buhd;
	Cakm;
	Cans;
	Cari;
	Cham;
	Cher;
	Cirt;
	Copt;
	Cprt;
	Cyrl;
	Cyrs;
	Deva;
	Dsrt;
	Dupl;
	Egyd;
	Egyh;
	Egyp;
	Elba;
	Ethi;
	Geor;
	Geok;
	Glag;
	Goth;
	Gran;
	Grek;
	Gujr;
	Guru;
	Hang;
	Hani;
	Hano;
	Hans;
	Hant;
	Hebr;
	Hluw;
	Hmng;
	Hung;
	Inds;
	Ital;
	Java;
	Jpan;
	Jurc;
	Kali;
	Khar;
	Khmr;
	Khoj;
	Knda;
	Kpel;
	Kthi;
	Lana;
	Laoo;
	Latf;
	Latg;
	Latn;
	Lepc;
	Limb;
	Lina;
	Linb;
	Lisu;
	Loma;
	Lyci;
	Lydi;
	Mand;
	Mani;
	Maya;
	Mend;
	Merc;
	Mero;
	Mlym;
	Moon;
	Mong;
	Mroo;
	Mtei;
	Mymr;
	Narb;
	Nbat;
	Nkgb;
	Nkoo;
	Nshu;
	Ogam;
	Olck;
	Orkh;
	Orya;
	Osma;
	Palm;
	Perm;
	Phag;
	Phli;
	Phlp;
	Phlv;
	Phnx;
	Plrd;
	Prti;
	Rjng;
	Roro;
	Runr;
	Samr;
	Sara;
	Sarb;
	Saur;
	Sgnw;
	Shaw;
	Shrd;
	Sind;
	Sinh;
	Sora;
	Sund;
	Sylo;
	Syrc;
	Syre;
	Syrj;
	Syrn;
	Tagb;
	Takr;
	Tale;
	Talu;
	Taml;
	Tang;
	Tavt;
	Telu;
	Teng;
	Tfng;
	Tglg;
	Thaa;
	Thai;
	Tibt;
	Tirh;
	Ugar;
	Vaii;
	Visp;
	Wara;
	Wole;
	Xpeo;
	Xsux;
	Yiii;
	Zmth;
	Zsym;
	Zyyy;
}

@:fakeEnum(String) enum GenericFamily {
	standard;
	sansserif;
	serif;
	fixed;
	cursive;
	fantasy;
}

@:fakeEnum(String) enum LevelOfControl {
	not_controllable;
	controlled_by_other_extensions;
	controllable_by_this_extension;
	controlled_by_this_extension;
}

@:require(chrome_ext)
@:native("chrome.fontSettings")
extern class FontSettings {
	static function clearFont( details : {?script:ScriptCode,genericFamily:GenericFamily}, ?f : Void->Void ) : Void;
	static function getFont( details : {?script:ScriptCode,genericFamily:GenericFamily}, f : {fontId:String,levelOfControl:LevelOfControl}->Void ) : Void;
	static function setFont( details : {?script:ScriptCode,genericFamily:GenericFamily,fontId:String}, ?f : Void->Void ) : Void;
	static function getFontList( f : Array<FontName>->Void ) : Void;
	static function clearDefaultFontSize( ?details : Dynamic, ?f : Void->Void ) : Void;
	static function getDefaultFontSize( ?details : Dynamic, ?f : {pixelSize:Int,levelOfControl:LevelOfControl}->Void ) : Void;
	static function setDefaultFontSize( details : {pixelSize:Int}, ?f : Void->Void ) : Void;
	static function clearDefaultFixedFontSize( ?details : Dynamic, ?f : Void->Void ) : Void;
	static function getDefaultFixedFontSize( ?details : Dynamic, ?f : {pixelSize:Int,levelOfControl:LevelOfControl}->Void ) : Void;
	static function setDefaultFixedFontSize( details : {pixelSize:Int}, ?f : Void->Void ) : Void;
	static function clearMinimumFontSize( ?details : Dynamic, ?f : Void->Void ) : Void;
	static function getMinimumFontSize( ?details : Dynamic, ?f : Dynamic->Void ) : Void;
	static function setMinimumFontSize( details : {pixelSize:Int}, ?f : Void->Void ) : Void;
	static var onChanged : Event<{fontId:String,script:ScriptCode,genericFamily:GenericFamily,levelOfControl:LevelOfControl}->Void>;
	static var onDefaultFontSizeChanged : Event<{pixelSize:Int,levelOfControl:LevelOfControl}->Void>;
	static var onMinimumFontSizeChanged : Event<{pixelSize:Int,levelOfControl:LevelOfControl}->Void>;
}
